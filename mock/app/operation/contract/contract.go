// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -package=mockContract -source=contract.go -destination=../../../mock/app/operation/contract/contract.go Contract
//

// Package mockContract is a generated GoMock package.
package mockContract

import (
	context "context"
	reflect "reflect"
	domain "tester/domain"
	dao "tester/persistance/mongo/dao"

	gomock "go.uber.org/mock/gomock"
)

// MockRawDataRepository is a mock of RawDataRepository interface.
type MockRawDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRawDataRepositoryMockRecorder
	isgomock struct{}
}

// MockRawDataRepositoryMockRecorder is the mock recorder for MockRawDataRepository.
type MockRawDataRepositoryMockRecorder struct {
	mock *MockRawDataRepository
}

// NewMockRawDataRepository creates a new mock instance.
func NewMockRawDataRepository(ctrl *gomock.Controller) *MockRawDataRepository {
	mock := &MockRawDataRepository{ctrl: ctrl}
	mock.recorder = &MockRawDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawDataRepository) EXPECT() *MockRawDataRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRawDataRepository) Add(arg0 context.Context, arg1 dao.RawData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRawDataRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRawDataRepository)(nil).Add), arg0, arg1)
}

// MockRawDataProvider is a mock of RawDataProvider interface.
type MockRawDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRawDataProviderMockRecorder
	isgomock struct{}
}

// MockRawDataProviderMockRecorder is the mock recorder for MockRawDataProvider.
type MockRawDataProviderMockRecorder struct {
	mock *MockRawDataProvider
}

// NewMockRawDataProvider creates a new mock instance.
func NewMockRawDataProvider(ctrl *gomock.Controller) *MockRawDataProvider {
	mock := &MockRawDataProvider{ctrl: ctrl}
	mock.recorder = &MockRawDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawDataProvider) EXPECT() *MockRawDataProviderMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRawDataProvider) GetAll(ctx context.Context) ([]dao.RawData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]dao.RawData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRawDataProviderMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRawDataProvider)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockRawDataProvider) GetByID(ctx context.Context, id string) (*dao.RawData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dao.RawData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRawDataProviderMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRawDataProvider)(nil).GetByID), ctx, id)
}

// GetByTime mocks base method.
func (m *MockRawDataProvider) GetByTime(ctx context.Context, createdAt string) (*dao.RawData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTime", ctx, createdAt)
	ret0, _ := ret[0].(*dao.RawData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTime indicates an expected call of GetByTime.
func (mr *MockRawDataProviderMockRecorder) GetByTime(ctx, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTime", reflect.TypeOf((*MockRawDataProvider)(nil).GetByTime), ctx, createdAt)
}

// MockPostsServiceProvider is a mock of PostsServiceProvider interface.
type MockPostsServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPostsServiceProviderMockRecorder
	isgomock struct{}
}

// MockPostsServiceProviderMockRecorder is the mock recorder for MockPostsServiceProvider.
type MockPostsServiceProviderMockRecorder struct {
	mock *MockPostsServiceProvider
}

// NewMockPostsServiceProvider creates a new mock instance.
func NewMockPostsServiceProvider(ctrl *gomock.Controller) *MockPostsServiceProvider {
	mock := &MockPostsServiceProvider{ctrl: ctrl}
	mock.recorder = &MockPostsServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsServiceProvider) EXPECT() *MockPostsServiceProviderMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockPostsServiceProvider) Fetch(ctx context.Context) (domain.Posts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(domain.Posts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockPostsServiceProviderMockRecorder) Fetch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockPostsServiceProvider)(nil).Fetch), ctx)
}
