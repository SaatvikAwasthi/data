// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -package=mockContract -source=contract.go -destination=../../../mock/app/api/contract/contract.go Contract
//

// Package mockContract is a generated GoMock package.
package mockContract

import (
	context "context"
	reflect "reflect"
	operation "tester/app/operation"
	factory "tester/app/operation/factory"
	query "tester/app/operation/query"

	gomock "go.uber.org/mock/gomock"
)

// MockOperationHandlerFactory is a mock of OperationHandlerFactory interface.
type MockOperationHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOperationHandlerFactoryMockRecorder
	isgomock struct{}
}

// MockOperationHandlerFactoryMockRecorder is the mock recorder for MockOperationHandlerFactory.
type MockOperationHandlerFactoryMockRecorder struct {
	mock *MockOperationHandlerFactory
}

// NewMockOperationHandlerFactory creates a new mock instance.
func NewMockOperationHandlerFactory(ctrl *gomock.Controller) *MockOperationHandlerFactory {
	mock := &MockOperationHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockOperationHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationHandlerFactory) EXPECT() *MockOperationHandlerFactoryMockRecorder {
	return m.recorder
}

// CommandHandler mocks base method.
func (m *MockOperationHandlerFactory) CommandHandler(handlers factory.CommandHandlers) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandHandler", handlers)
	ret0, _ := ret[0].(any)
	return ret0
}

// CommandHandler indicates an expected call of CommandHandler.
func (mr *MockOperationHandlerFactoryMockRecorder) CommandHandler(handlers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandHandler", reflect.TypeOf((*MockOperationHandlerFactory)(nil).CommandHandler), handlers)
}

// QueryHandler mocks base method.
func (m *MockOperationHandlerFactory) QueryHandler(handlers factory.QueryHandlers) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHandler", handlers)
	ret0, _ := ret[0].(any)
	return ret0
}

// QueryHandler indicates an expected call of QueryHandler.
func (mr *MockOperationHandlerFactoryMockRecorder) QueryHandler(handlers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHandler", reflect.TypeOf((*MockOperationHandlerFactory)(nil).QueryHandler), handlers)
}

// MockGetAllRawData is a mock of GetAllRawData interface.
type MockGetAllRawData struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllRawDataMockRecorder
	isgomock struct{}
}

// MockGetAllRawDataMockRecorder is the mock recorder for MockGetAllRawData.
type MockGetAllRawDataMockRecorder struct {
	mock *MockGetAllRawData
}

// NewMockGetAllRawData creates a new mock instance.
func NewMockGetAllRawData(ctrl *gomock.Controller) *MockGetAllRawData {
	mock := &MockGetAllRawData{ctrl: ctrl}
	mock.recorder = &MockGetAllRawDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllRawData) EXPECT() *MockGetAllRawDataMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockGetAllRawData) Handle(ctx context.Context) (operation.RawDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx)
	ret0, _ := ret[0].(operation.RawDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockGetAllRawDataMockRecorder) Handle(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockGetAllRawData)(nil).Handle), ctx)
}

// MockGetRawData is a mock of GetRawData interface.
type MockGetRawData struct {
	ctrl     *gomock.Controller
	recorder *MockGetRawDataMockRecorder
	isgomock struct{}
}

// MockGetRawDataMockRecorder is the mock recorder for MockGetRawData.
type MockGetRawDataMockRecorder struct {
	mock *MockGetRawData
}

// NewMockGetRawData creates a new mock instance.
func NewMockGetRawData(ctrl *gomock.Controller) *MockGetRawData {
	mock := &MockGetRawData{ctrl: ctrl}
	mock.recorder = &MockGetRawDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRawData) EXPECT() *MockGetRawDataMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockGetRawData) Handle(ctx context.Context, arg1 query.GetRawDataQueryRequest) (operation.RawDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, arg1)
	ret0, _ := ret[0].(operation.RawDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockGetRawDataMockRecorder) Handle(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockGetRawData)(nil).Handle), ctx, arg1)
}

// MockAddRawData is a mock of AddRawData interface.
type MockAddRawData struct {
	ctrl     *gomock.Controller
	recorder *MockAddRawDataMockRecorder
	isgomock struct{}
}

// MockAddRawDataMockRecorder is the mock recorder for MockAddRawData.
type MockAddRawDataMockRecorder struct {
	mock *MockAddRawData
}

// NewMockAddRawData creates a new mock instance.
func NewMockAddRawData(ctrl *gomock.Controller) *MockAddRawData {
	mock := &MockAddRawData{ctrl: ctrl}
	mock.recorder = &MockAddRawDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddRawData) EXPECT() *MockAddRawDataMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockAddRawData) Handle(ctx context.Context) (operation.AddRawDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx)
	ret0, _ := ret[0].(operation.AddRawDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockAddRawDataMockRecorder) Handle(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockAddRawData)(nil).Handle), ctx)
}
